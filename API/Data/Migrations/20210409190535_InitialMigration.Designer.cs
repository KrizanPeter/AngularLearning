// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210409190535_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Entities.GameBlock", b =>
                {
                    b.Property<int>("GameBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GamePlanId")
                        .HasColumnType("int");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("GameBlockId");

                    b.HasIndex("GamePlanId");

                    b.HasIndex("HeroId");

                    b.HasIndex("ItemId");

                    b.ToTable("GameBlocks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GameBlock");
                });

            modelBuilder.Entity("API.Entities.GamePlan", b =>
                {
                    b.Property<int>("GamePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlanSize")
                        .HasColumnType("int");

                    b.HasKey("GamePlanId");

                    b.ToTable("GamePlans");
                });

            modelBuilder.Entity("API.Entities.Hero", b =>
                {
                    b.Property<int>("HeroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HeroName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeroTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Lives")
                        .HasColumnType("int");

                    b.HasKey("HeroId");

                    b.HasIndex("HeroTypeId");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("API.Entities.HeroType", b =>
                {
                    b.Property<int>("HeroTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HeroTypeId");

                    b.ToTable("HeroTypes");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HeroId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("HeroId");

                    b.HasIndex("ItemTypeId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("API.Entities.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemTypeId");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("API.Entities.Monster", b =>
                {
                    b.Property<int>("MonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MonsterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterTypeId")
                        .HasColumnType("int");

                    b.HasKey("MonsterId");

                    b.HasIndex("MonsterTypeId");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("API.Entities.MonsterType", b =>
                {
                    b.Property<int>("MonsterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonsterTypeId");

                    b.ToTable("MonsterTypes");
                });

            modelBuilder.Entity("API.Entities.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GamePlanId")
                        .HasColumnType("int");

                    b.Property<string>("SessionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.HasKey("SessionId");

                    b.HasIndex("GamePlanId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("API.Entities.GameBlockHall", b =>
                {
                    b.HasBaseType("API.Entities.GameBlock");

                    b.HasDiscriminator().HasValue("GameBlockHall");
                });

            modelBuilder.Entity("API.Entities.GameBlockRoom", b =>
                {
                    b.HasBaseType("API.Entities.GameBlock");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasIndex("MonsterId");

                    b.HasDiscriminator().HasValue("GameBlockRoom");
                });

            modelBuilder.Entity("API.Entities.GameBlock", b =>
                {
                    b.HasOne("API.Entities.GamePlan", "GamePlan")
                        .WithMany("GameBlocks")
                        .HasForeignKey("GamePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlan");

                    b.Navigation("Hero");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("API.Entities.Hero", b =>
                {
                    b.HasOne("API.Entities.HeroType", "HeroType")
                        .WithMany()
                        .HasForeignKey("HeroTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroType");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.HasOne("API.Entities.Hero", null)
                        .WithMany("Items")
                        .HasForeignKey("HeroId");

                    b.HasOne("API.Entities.ItemType", "ItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("API.Entities.Monster", b =>
                {
                    b.HasOne("API.Entities.MonsterType", "MonsterType")
                        .WithMany()
                        .HasForeignKey("MonsterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonsterType");
                });

            modelBuilder.Entity("API.Entities.Session", b =>
                {
                    b.HasOne("API.Entities.GamePlan", "GamePlan")
                        .WithMany()
                        .HasForeignKey("GamePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlan");
                });

            modelBuilder.Entity("API.Entities.GameBlockRoom", b =>
                {
                    b.HasOne("API.Entities.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("API.Entities.GamePlan", b =>
                {
                    b.Navigation("GameBlocks");
                });

            modelBuilder.Entity("API.Entities.Hero", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
